import re

phone_list = ['9999999999', '999999-999', '99999x9999', '+79261234567', '89261234567', '79261234567',
              '+7 926 123 45 67', '8(926)123-45-67', '123-45-67', '9261234567', '79261234567', '(495)1234567',
              '(495) 123 45 67', '89261234567', '8-926-123-45-67', '8 927 1234 234', '8 927 12 12 888',
              '8 927 12 555 12', '8 927 123 8 123']

pattern = r'^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$'


def clean_up_number(phone_number: str, print_debug: bool = False) -> str:
    """
    –û—Ç—á–∏—Å—Ç–∏–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    :param phone_number: –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    :param print_debug: –ù—É–∂–Ω–æ –ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—á–∏—Å—Ç–∫–∏
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å—Ç—ã–π –Ω–æ–º–µ—Ä
    """

    removed_chars = [' ', '(', ')', '+', '-', '.', ',', '!']
    clear_number = ''.join(filter(lambda x: x not in removed_chars, phone_number))
    if print_debug:
        print(f'üîÅ –ì—Ä—è–∑–Ω—ã–π –Ω–æ–º–µ—Ä: {phone_number} –ß–∏—Å—Ç—ã–π –Ω–æ–º–µ—Ä: {clear_number}')
    return clear_number


def check_phone_number(phone_number: str, check_length: bool = True, min_length: int = 10, pattern: str = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    :param phone_number: –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    :param check_length: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞
    :param min_length: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞—è –Ω–æ–º–µ—Ä–∞
    :param pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: bool
    """

    if check_length:
        if len(phone_number) < min_length:
            return False

    if pattern is None:
        pat = r'^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$'
    else:
        pat = pattern

    if re.search(pat, phone_number):
        return True
    else:
        return False


def check_number(phone_number: str, pattern: str) -> bool:
    """
    –í–∞—Ä–∏–∞–Ω—Ç 2. –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π
    :param phone_number: –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    :param pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return:
    """

    if re.match(pattern, phone_number) and len(phone_number) == 10:
        return True
    else:
        return False


if __name__ == '__main__':
    counter = 0
    for item in phone_list:
        counter += 1
        res = '–≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ' if check_phone_number(clean_up_number(item, True)) else '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç'
        print(f'{counter} –Ω–æ–º–µ—Ä {item}: {res}')

    print('*' * 40 + '\n')
    counter = 0
    for item in phone_list:
        counter += 1
        res = '–≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ' if check_number(clean_up_number(item), pattern) else '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç'
        print(f'{counter} –Ω–æ–º–µ—Ä {item}: {res}')

    print('*' * 40 + '\n')
    counter = 0
    for item in phone_list:
        counter += 1
        res1 = '–≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ' if check_phone_number(clean_up_number(item)) else '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç'
        res2 = '–≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ' if check_number(clean_up_number(item), pattern) else '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç'
        print(f'{counter} –Ω–æ–º–µ—Ä {item}: {res1} - {res2}')
